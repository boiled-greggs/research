SHELL=/bin/sh
#
#
# This is the makefile for the SCALABLE version of static, the
#  tight-binding total energy and electronic structure evaluation
#  program.  The code is written using Fortran 77 and MPI.  The
#  options here assume that we are running on a DEC Alpha/Compaq
#  machine using the default DEC f77 compiler.
#
#  Note that you have options for constructing scalar or parallel
#  executables, and you may choose to use the Compaq BLAS and LAPACK
#  libraries (recommended), or our provided lapack.f routine.
#
#  For parallel runs, set minproc in file P3 to the minimum number
#  of processors you plan to use.  If the number of processors is
#  less than the minproc, the code will not run.  On the other hand,
#  choosing a large value for minproc reduces the memory needed for
#  a given run
#
#  If you are running on a different system, you will have to
#  change options to reflect your system.  If there are any
#  bugs in this makefile, please contact the authors at
#  mehl@dave.nrl.navy.mil
#
#                                      --  Mike Mehl
#                                      --  Naval Research Laboratory
#                                      --  4 March 1998 
#                                      --  Revised 16 Aug 2002
#
# This is an attempt to integrate the serial and parallel versions
#  of static.  To do this, we'll put in some dummy subroutines
#  to make fake MPI calls when we integrate the static version

# Here's what you get for various command line options with make, assuming
# that you've set COMMAND=static below:

# make                  => static.parlib  (Parallel MPI version, Compaq math libraries) (default)
# make parlib           => static.parlib  (Parallel MPI version, Compaq math libraries) (default)
# make parnlb           => static.parnlb  (Parallel MPI version, lapack.f)
# make scrlib           => static.scrlib  (Scalar version, Compaq math libraries)
# make scrnlb           => static.scrnlb  (Scalar version, lapack.f)

COMMAND=static

CFT=f77

# Note that the -fast option implies, among other things
# (see man f77), -arch host, which means that the code is
# optimized for the architecture of the compiler machine.

# FFLAGS = -fast
FFLAGS = -O -arch host

.SUFFIXES: .o .f

.f.o :
	$(CFT) $(FFLAGS) $*.f -c

#   Note that FORS deliberately does not mention lapack.f, dlamch.f or mpifake.f

    FORS= static.f input.f input1.f setlat.f rotate.f setpar.f \
    setparv.f diag.f search2.f spinham.f setham.f sethamv.f addspins.f \
    bande.f fermi.f hsort.f mapk.f matmlt.f kptin.f kptgen.f rdspgp.f \
    gdot.f perturb.f modeparse.f tweaks.f

    OBJS= static.o input.o input1.o setlat.o rotate.o \
    diag.o setham.o sethamv.o addspins.o setpar.o setparv.o spinham.o \
    search2.o bande.o fermi.o hsort.o mapk.o matmlt.o kptin.o kptgen.o \
    rdspgp.o gdot.o perturb.o modeparse.o tweaks.o

# Parallel code for DEC Alphas and Compaqs -- Compaq blas and lapack libraries

parlib:	nompifh $(OBJS)
	$(CFT) $(FFLAGS) $(LDFLAGS)  -o $(COMMAND).parlib $(OBJS) -lfmpi -lmpi -lelan -lcxml $(LIBS)
	strip $(COMMAND).parlib
	chmod 755 $(COMMAND).parlib

# Parallel code for DEC Alphas and Compaqs -- lapack.f

parnlb:	nompifh $(OBJS) lapack.o dlamch.o
	$(CFT) $(FFLAGS) $(LDFLAGS)  -o $(COMMAND).parnlb $(OBJS) lapack.o dlamch.o -lfmpi -lmpi -lelan $(LIBS)
	strip $(COMMAND).parnlb
	chmod 755 $(COMMAND).parnlb

# Scalar code for DEC Alphas and Compaqs -- Compaq blas and lapack libraries

scrlib:	addmpifh $(OBJS) mpifake.o
	$(CFT) $(FFLAGS) $(LDFLAGS)  -o $(COMMAND).scrlib $(OBJS) mpifake.o -lcxml $(LIBS)
	strip $(COMMAND).scrlib
	chmod 755 $(COMMAND).scrlib
	rm -f mpif.h

# Scalar code for DEC Alphas and Compaqs -- lapack.f

scrnlb:	addmpifh $(OBJS) lapack.o dlamch.o mpifake.o
	$(CFT) $(FFLAGS) $(LDFLAGS)  -o $(COMMAND).scrlib $(OBJS) lapack.o dlamch.o mpifake.o $(LIBS)
	strip $(COMMAND).scrlib
	chmod 755 $(COMMAND).scrlib
	rm -f mpif.h

# No optimization on dlamch.o (Compaq flags):

dlamch.o:
	$(CFT) -arch host -c dlamch.f

# This routine puts the fake header file mpif.h, used for single processor
#   runs, where we want it.

addmpifh:
	cat mpifake.h > mpif.h

# Remove the fake mpif.h header so that we can link with the real MPI headers:

nompifh:
	rm -f mpif.h

# If you don't like a2ps as your pretty printer, substitute your favorite
#  on this line.  The "-Av" is the current way to print two files on
#  the same sheet of paper.

print:
	a2ps --medium=Letter -Av makefile.* P1 P2 P3 $(FORS) mpifake.[fh] -o static.ps

# This provides a printout of the documentation included in this directory,
#  NOT the on-line manual:

docprint:
	a2ps --medium=Letter -Av 0README* INSTALLATION REVISION_HISTORY -o docs.ps

# This command remakes the ALLSOURCE.tgz from the current versions
#  of the subroutines makefile, and P1-3, including lapack.f and dlamch.f

package:
	rm -f ALLSOURCE.tgz
	tar cvf ALLSOURCE.tar 0README* INSTALLATION REVISION_HISTORY makefile* P1 P2 P3 $(FORS) lapack.f dlamch.f mpifake.[fh]
	chmod 444 ALLSOURCE.tar
	gzip -9 ALLSOURCE.tar
	mv ALLSOURCE.tar.gz ALLSOURCE.tgz

# If for some reason you want the entire program, less the LaPack routines
#  and mpifake.*, in one file:

concat:
	cat $(FORS) > static.for

# Your computer center may not have
# the ftnchek program available, but it is so useful that I am
# leaving it here.  This will really check the serial code.  Note
# that mpifake.f, dlamch.f and lapack.f are left out, as they are pretty well
# debugged and generate a lot of parameter type errors:

fcheck:
	cat mpifake.h > mpif.h
	ftnchek $(FORS) > ftnchek.report
	rm mpif.h

clean:
	rm -f *.o
	rm -f mpif.h

# Dependencies

bande.o: P1 P2 P3
diag.o: P1 P2
input.o: P1
input1.o: P1
kptgen.o: P1 P3
kptin.o: P1 P3
rdspgp.o: P1 P3
rotate.o: P1
search2.o: P1
setham.o: P1
sethamv.o: P1
setpar.o: P1
setparv.o: P1
static.o: P1 P2 P3
tweaks.o: P1 P2 P3
